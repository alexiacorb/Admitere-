1.a)1+x+(x^2/2)+(x^3/6)+(x^4/24)+...
   termenul general e x^(n-1)/(1*2*...*(n-1))=x^(n-1)/(n-1)!
   raspuns (ii)
 b)raspuns (iii, i)
 c)[a1, b1] ⊂ R 
   [a2, b2] ⊂ R
    a1≤a2
    a1<=b1
    a2<=b2
    R:(i)
2.a)f(1, n)=1
   (i) 1, 2, 2, 1 -->n=4
       f(1,4)=f(2,3)=f(3,2)=1
    programul vf daca sirul e un palindrom, returneaza 1 in caz afirmativ si 0 in caz negativ
    R: i, ii, iii, v, vi
  b) programul verifica daca numarul e de tip palindrom astfel se executa cat timp i<j astfel facandu se comparatii doar pana la jumatatea numarului
     R: [n/2]
4. a) void IP(char s[100],int &n,int v[100]){
    char *p;
    v[100]={};
    n=0;
    p=strtok(s,".");
    while(p!=NULL){
        n++;
        int lung;
        lung=strlen(p);
        for(int i=0;i<lung;i++){
            v[n]=v[n]*10+(p[i]-'0');
        }
        p=strtok(NULL,".");
     }
   }
   b) ?
#include <iostream>
#include <cstring>
using namespace std;
int n,v[100]={};
void IP(char s[100],int &n,int v[100]){
    char *p;
    v[100]={};
    n=0;
    p=strtok(s,".");
    while(p!=NULL){
        n++;
        int lung;
        lung=strlen(p);
        for(int i=0;i<lung;i++){
            v[n]=v[n]*10+(p[i]-'0');
        }
        p=strtok(NULL,".");
    }
}
int verifIP(char s[100]){
    int ok=0;
    IP(s,n,v);
    if(n!=4){
        return 0;
    }
    if(v[1]==0){
        return 2;
    }
    for(int i=1;i<=n;i++){
        if(v[i]>=0 && v[i]<=255){
            ok=1;
        }
    }
    return ok;

}
int main()
{
    char s[100];
    cin.getline(s,15);
    IP(s,n,v);
    for(int i=1;i<=n;i++){
        cout<<v[i]<<" ";
    }
    cout<<endl;
    cout<<verifIP(s);
    return 0;
}

5. a) int nivel(int t[100],int i){
      int k=0;
       while(t[i]!=0){
             k++;
             i=t[i];
       }
       return k;
     }
   b)int ascendent(int t[100],int nod1,int nod2){
    if(t[nod1]==t[nod2]){
        return t[nod1];
    }
    else{
        if(nivel(t,nod1)>nivel(t,nod2)){
            return ascendent(t,t[nod1],nod2);
        }
        else{
            return ascendent(t,nod1,t[nod2]);
        }
    }
   }

 
